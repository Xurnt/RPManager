generator client {
  provider        = "prisma-client-js"
  output          = "../node_modules/.prisma/client"
  previewFeatures = ["relationJoins"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Character {
  id                                   Int     @id
  name                                 String
  title                                String
  age                                  Int
  mainClassId                          Int
  secondClassId                        Int?
  vitality                             Int
  mana                                 Int
  strength                             Int
  dexterity                            Int
  courage                              Int
  charisma                             Int
  perception                           Int
  discretion                           Int
  knowledge                            Int
  destiny                              Int
  publicStory                          String
  privateStory                         String
  motivations                          String
  fears                                String
  like                                 String
  dislike                              String
  talentName                           String
  weaknessName                         String
  inventory                            String
  talentDescription                    String
  weaknessDescription                  String
  picturePath                          String
  currentVitality                      Int
  currentMana                          Int
  corruption                           Int     @default(100)
  selectable                           Boolean @default(false)
  currentCorruption                    Int     @default(0)
  Class_Character_mainClassIdToClass   Class   @relation("Character_mainClassIdToClass", fields: [mainClassId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "Character_classId_fkey")
  Class_Character_secondClassIdToClass Class?  @relation("Character_secondClassIdToClass", fields: [secondClassId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  User                                 User[]

  @@index([mainClassId], map: "fki_class")
  @@index([secondClassId], map: "fki_second_class")
}

model Class {
  id                                       Int           @id
  name                                     String
  classCategoryId                          Int
  description                              String
  Character_Character_mainClassIdToClass   Character[]   @relation("Character_mainClassIdToClass")
  Character_Character_secondClassIdToClass Character[]   @relation("Character_secondClassIdToClass")
  ClassCategory                            ClassCategory @relation(fields: [classCategoryId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@index([classCategoryId], map: "fki_class_category")
}

model ClassCategory {
  id          Int     @id
  name        String
  description String
  Class       Class[]
}

model User {
  id          Int        @id @default(autoincrement())
  name        String
  password    String
  roleId      Int
  characterId Int?
  isConnected Boolean    @default(false)
  Character   Character? @relation(fields: [characterId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  UserRole    UserRole   @relation(fields: [roleId], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model UserRole {
  id   Int    @id
  role String
  User User[]
}

model GameSession {
  isActive                    Boolean
  isCharacterSelectionAllowed Boolean
  id                          Int     @id
}

model TextDisplay {
  id    Int     @id
  title String?
  core  String?
}
